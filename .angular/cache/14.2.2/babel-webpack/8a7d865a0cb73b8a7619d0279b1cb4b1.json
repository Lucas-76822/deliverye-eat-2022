{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener } from \"@angular/core\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport * as Notiflix from \"notiflix\";\nlet PedidoComponent = class PedidoComponent {\n  constructor(modalDialogService, pd, router) {\n    this.modalDialogService = modalDialogService;\n    this.pd = pd;\n    this.router = router;\n    this.Titulo = \"Confirma tu Pedido!\";\n    this.TituloAccionABMC = {\n      A: \"(Agregar)\",\n      B: \"(Eliminar)\",\n      M: \"(Modificar)\",\n      C: \"(Consultar)\",\n      L: \"(Listado)\"\n    };\n    this.AccionABMC = \"L\"; // inicialmente inicia en el Listado de articulos (buscar con parametros)\n\n    this.Mensajes = {\n      SD: \" No se encontraron registros...\",\n      RD: \" Revisar los datos ingresados...\"\n    }; // opciones de combo\n\n    this.OcionesCiudad = [{\n      Id: 1,\n      Nombre: \"Cordoba\"\n    }, {\n      Id: 2,\n      Nombre: \"Carlos Paz\"\n    }, {\n      Id: 3,\n      Nombre: \"Jesus Maria\"\n    }, {\n      Id: 4,\n      Nombre: \"Calamuchita\"\n    }];\n    this.OpcionesFormaPago = [{\n      Id: 1,\n      Nombre: \"Efectivo\"\n    }, {\n      Id: 2,\n      Nombre: \"Credito/Debito\"\n    }];\n    this.OpcionesFormaEntrega = [{\n      Id: 1,\n      Nombre: \"Inmediata\"\n    }, {\n      Id: 2,\n      Nombre: \"Acordar Fecha y Hora\"\n    }];\n    this.opSelec = 1;\n    this.opFormaEntrega = 1;\n    this.FormRegistro = new FormGroup({\n      Calle: new FormControl(\"\", [Validators.required]),\n      Altura: new FormControl(null, [Validators.required, Validators.pattern(\"[0-9]{1,10}\")]),\n      Referencia: new FormControl(\"\", [Validators.maxLength(300)]),\n      FechaAlta: new FormControl(\"\"),\n      Activo: new FormControl(1),\n      Entrega: new FormControl(1),\n      Ciudad: new FormControl(null, [Validators.required]),\n      Monto: new FormControl(null, [Validators.required, Validators.pattern(\"[0-9]{1,10}\")]),\n      Nombre: new FormControl(\"\", [Validators.required, Validators.maxLength(50)]),\n      Tarjeta: new FormControl(null, [Validators.required, Validators.pattern(\"5[0-9]{15,15}\")]),\n      CVV: new FormControl(null, [Validators.required, Validators.pattern(\"[0-9]{3,3}\")]),\n      FechaVencimiento: new FormControl(\"\", [Validators.required, Validators.pattern(\"(0[1-9]|1[012])[-/][0-9]{2}\")])\n    });\n    this.submitted = false;\n    this.visionMapa = false;\n    this.ciudadSeleccionada = 1;\n  }\n\n  ngOnInit() {\n    this.fechaActual = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), new Date().getHours(), new Date().getMinutes());\n    this.fechaStrActual = this.pd.transform(this.fechaActual, \"yyyy-MM-dd\");\n  }\n\n  cambiarMapa() {\n    this.mapaParaCiudad = \"../../../assets/img/\" + this.ciudadSeleccionada + \".png\";\n  }\n\n  desplegarMapa() {\n    this.visionMapa = !this.visionMapa;\n  }\n\n  asignarDireccion() {\n    this.FormRegistro.controls.Calle.setValue(\"San Lorenzo\");\n    this.FormRegistro.controls.Altura.setValue(468);\n  }\n\n  Volver() {\n    this.AccionABMC = \"L\";\n  }\n\n  confirmar() {\n    console.log(this.montoCarrito + \" - \" + this.montoSelec); //this.setValidEntrega();\n\n    this.setValidFormaPago();\n    this.verificarFechaVenc();\n\n    if (this.montoCarrito === 0) {\n      Notiflix.Notify.failure(\"El carrito está vacío\");\n      return;\n    } else {\n      this.validarMonto();\n      this.mensajeConfirmacion();\n    }\n\n    if (this.FormRegistro.invalid) {\n      Notiflix.Notify.failure(\"No ha ingresado correctamente todos los parametros\");\n    }\n  }\n\n  guardarMonto(event) {\n    this.montoCarrito = event.monto;\n  }\n\n  validarMonto() {\n    if (this.montoSelec <= this.montoCarrito) {\n      this.FormRegistro.controls.Monto.setValue(null);\n    }\n  }\n\n  setValidFormaPago() {\n    if (this.opSelec == 1 && this.FormRegistro.controls.Monto.valid) {\n      this.FormRegistro.controls.Nombre.setValue(\"JOHN DOE\");\n      this.FormRegistro.controls.Tarjeta.setValue(5555555555555555);\n      this.FormRegistro.controls.CVV.setValue(999);\n      this.FormRegistro.controls.FechaVencimiento.setValue(\"01/99\");\n    } else if (this.opSelec == 2 && this.FormRegistro.controls[\"Nombre\"].valid && this.FormRegistro.controls[\"Tarjeta\"].valid && this.FormRegistro.controls[\"CVV\"].valid && this.FormRegistro.controls[\"FechaVencimiento\"].valid) {\n      this.FormRegistro.controls.Monto.setValue(1000000);\n    }\n\n    this.montoSelec = this.FormRegistro.controls.Monto.value;\n  }\n  /*setValidEntrega() {\r\n    if (this.opFormaEntrega == 1) {\r\n      this.FormRegistro.controls.FechaAlta.setValue(\r\n        this.fechaStrActual.toString()\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n  }*/\n\n\n  verificarFechaVenc() {\n    if (this.opSelec == 1) {\n      return;\n    } else {\n      let mesVencimiento = this.fechaVencIngresada.charAt(0) + this.fechaVencIngresada.charAt(1);\n      let añoVencimiento = this.fechaVencIngresada.charAt(3) + this.fechaVencIngresada.charAt(4);\n\n      if (parseInt(añoVencimiento, 10) < 22 || parseInt(mesVencimiento, 10) <= this.fechaActual.getMonth() && parseInt(añoVencimiento, 10) == 22) {\n        this.FormRegistro.controls.FechaVencimiento.setValue(\"\");\n        return;\n      }\n    }\n  }\n\n  entregaValidadorRequerido() {\n    if (this.opFormaEntrega != 2) {\n      this.FormRegistro.controls[\"FechaAlta\"].setValidators(null);\n      this.FormRegistro.controls[\"FechaAlta\"].updateValueAndValidity();\n    } else {\n      this.FormRegistro.controls[\"FechaAlta\"].setValidators([Validators.required]);\n      this.FormRegistro.controls[\"FechaAlta\"].updateValueAndValidity();\n    }\n  }\n\n  mensajeConfirmacion() {\n    this.submitted = true; // verificar que los validadores esten OK\n\n    if (this.FormRegistro.invalid) {\n      return;\n    } else {\n      Notiflix.Notify.success(\"Su pedido se ha realizado de forma exitosa.\");\n      setTimeout(() => {\n        this.router.navigate([\"/inicio\"]);\n      }, 750);\n      setTimeout(() => {\n        this.FormRegistro.reset();\n      }, 800);\n    }\n  }\n\n};\n\n__decorate([HostListener(\"document:mousemove\", [\"$event\"])], PedidoComponent.prototype, \"cambiarMapa\", null);\n\nPedidoComponent = __decorate([Component({\n  selector: \"app-pedido\",\n  templateUrl: \"./pedido.component.html\",\n  styleUrls: [\"./pedido.component.css\"]\n})], PedidoComponent);\nexport { PedidoComponent };","map":null,"metadata":{},"sourceType":"module"}